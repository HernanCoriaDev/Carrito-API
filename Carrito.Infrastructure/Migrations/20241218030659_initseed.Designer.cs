// <auto-generated />
using System;
using Carrito.Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carrito.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241218030659_initseed")]
    partial class initseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Carrito.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Carrito.Domain.Entities.CartProduct", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("Carrito.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Smartphone con pantalla de 6.5' y cámara de 48MP",
                            Name = "Smartphone",
                            Price = 799m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Laptop con procesador i7, 16GB de RAM y 512GB SSD",
                            Name = "Laptop",
                            Price = 1200m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Auriculares inalámbricos con cancelación de ruido",
                            Name = "Auriculares Bluetooth",
                            Price = 150m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Televisor de 55' con resolución 4K y Smart TV",
                            Name = "Televisor 4K",
                            Price = 800m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Cargador inalámbrico rápido para dispositivos compatibles",
                            Name = "Cargador Inalámbrico",
                            Price = 50m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Tablet de 10' con 64GB de almacenamiento y 4GB de RAM",
                            Name = "Tablet",
                            Price = 350m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Reloj inteligente con monitor de frecuencia cardíaca y GPS",
                            Name = "Smartwatch",
                            Price = 220m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Cámara digital de 20MP con pantalla táctil y Wi-Fi integrado",
                            Name = "Cámara Digital",
                            Price = 450m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Parlantes inalámbricos con sonido estéreo y batería de larga duración",
                            Name = "Parlantes Bluetooth",
                            Price = 120m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Auriculares con micrófono y sonido envolvente para juegos",
                            Name = "Auriculares Gaming",
                            Price = 90m
                        },
                        new
                        {
                            Id = 11,
                            Description = "Drone con cámara 4K y control remoto de 100m",
                            Name = "Drone",
                            Price = 350m
                        },
                        new
                        {
                            Id = 12,
                            Description = "Reproductor de Blu-ray con acceso a streaming y 4K",
                            Name = "Reproductor de Blu-ray",
                            Price = 120m
                        },
                        new
                        {
                            Id = 13,
                            Description = "Disco duro externo de 1TB con USB 3.0 para transferencias rápidas",
                            Name = "Disco Duro Externo",
                            Price = 80m
                        },
                        new
                        {
                            Id = 14,
                            Description = "Monitor 27' 4K con resolución Ultra HD y tecnología IPS",
                            Name = "Monitor 4K",
                            Price = 350m
                        },
                        new
                        {
                            Id = 15,
                            Description = "Teclado mecánico con retroiluminación RGB y teclas programables",
                            Name = "Teclado Mecánico",
                            Price = 110m
                        });
                });

            modelBuilder.Entity("Carrito.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("VIP")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Carrito.Domain.Entities.Cart", b =>
                {
                    b.HasOne("Carrito.Domain.Entities.User", "Users")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Carrito.Domain.Entities.CartProduct", b =>
                {
                    b.HasOne("Carrito.Domain.Entities.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carrito.Domain.Entities.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Carrito.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("Carrito.Domain.Entities.Product", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("Carrito.Domain.Entities.User", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
